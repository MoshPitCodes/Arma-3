enableDebugConsole = 2; //NNS
respawn = 3;
respawnDelay = 5; //NNS
respawnOnStart = -1;
allowFunctionsLog = 0; //NNS

respawnTemplates[] = {"MenuPosition", "MenuInventory", "Tickets", "Spectator"};

class Header {
	gameType = Escape;
	minPlayers = 1;
	maxPlayers = 12; //NNS
};

dev = "Vasek, mod by NNS";
briefingName = $STR_NNS_mission_name; //NNS
author = $STR_A3_Bohemia_Interactive;
overviewPicture = "img\loading_screen_nns.paa"; //NNS
overviewText = $STR_NNS_briefing_overview; //NNS
overviewTextLocked = $STR_NNS_briefing_overview; //NNS
onLoadName = $STR_NNS_mission_name; //NNS
onLoadMission = $STR_NNS_briefing_overview; //NNS
loadScreen = "img\loading_screen_nns.paa"; //NNS
disabledAI = 0;

// Player loadouts
#include "LoadoutClasses.inc"

// Custom, non-sandbox groups
#include "CustomGroups.inc"

class Params {
	class Loadouts {
		title = $STR_A3_Escape_param_respawnLoadouts;
		values[] = {0, 1, 2, 3};
		texts[] = {$STR_NNS_param_respawnLoadouts_overequip, $STR_A3_Escape_param_respawnLoadouts01, $STR_A3_Escape_param_respawnLoadouts02, $STR_A3_Escape_param_respawnLoadouts03};
		default = 0; //NNS
		file = "params\respawnLoadouts.sqf";
	};

	class EnemyEquipment {
		title = $STR_A3_Escape_param_enemyEquipment;
		values[] = {0, 1};
		texts[] = {$STR_A3_Escape_param_enemyEquipment01, $STR_A3_Escape_param_enemyEquipment02};
		default = 0; //NNS
		file = "params\enemyEquipment.sqf";
	};

	class noOfRespawns {
		title = $STR_A3_rscdisplaydebriefing_loadstext_mp;
		values[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
		texts[] = {"0", $STR_A3_Escape_param_respawnGroup10, $STR_A3_Escape_param_respawnGroup20, $STR_A3_Escape_param_respawnGroup30, $STR_A3_Escape_param_respawnGroup40, $STR_A3_Escape_param_respawnGroup50, $STR_A3_Escape_param_respawnGroup100, $STR_A3_Escape_param_respawnIndividual01, $STR_A3_Escape_param_respawnIndividual02, $STR_A3_Escape_param_respawnIndividual03, $STR_A3_Escape_param_respawnIndividual04, $STR_A3_Escape_param_respawnIndividual05, $STR_A3_Escape_param_respawnIndividual10};
		default = 6; //NNS
		file = "params\setRespawn.sqf";
	};

	class SpecialEvents {
		title = $STR_A3_Escape_param_enemySupports;
		values[] = {0, 1};
		texts[] = {$STR_disabled, $STR_A3_Escape_param_enemySupportsOn};
		default = 1;
		file = "params\setSpecialEvents.sqf";
	};

	class AllowCrewInImmobile {
		title = $STR_A3_Escape_param_fubar;
		values[] = {0, 1};
		texts[] = {$STR_A3_Escape_param_fubarLeave, $STR_A3_Escape_param_fubarStay};
		default = 0; //NNS
		file = "params\setCrewInImmobile.sqf";
	};

	class Fog {
		title = $STR_A3_Param_Fog_Title;
		values[] = {0,1,3,4}; //NNS: add more
		texts[] = {$STR_A3_Param_Fog_0, $STR_A3_Param_Fog_1, $STR_A3_Param_Fog_2, $STR_A3_Param_Fog_3}; //NNS: add more
		default = 0;
		file = "params\setFog.sqf";
	};

	class CustomObjectives { //NNS
		title = $STR_NNS_param_CustomObjectives_title;
		values[] = {0,1,2,3,4,5,6};
		texts[] = {$STR_NNS_param_disable,"1","2","3","4","5",$STR_NNS_param_all};
		default = 6;
		file = "params\setCustomObjectives.sqf";
	};

	class DebugOutputs { //NNS
		title = $STR_NNS_param_DebugOutputs_title;
		values[] = {0,1,2,3};
		texts[] = {$STR_NNS_param_disable,$STR_NNS_param_DebugOutputs_chatbox,$STR_NNS_param_DebugOutputs_logs,$STR_NNS_param_DebugOutputs_both};
		default = 0;
		file = "params\setDebugOutputs.sqf";
	};
	
	class DebugMenu { //NNS
		title = $STR_NNS_param_DebugMenu_title;
		values[] = {0,1,2};
		texts[] = {$STR_NNS_param_disable,$STR_NNS_param_DebugMenu_admin,$STR_NNS_param_DebugMenu_all};
		default = 0;
		file = "params\setDebugMenu.sqf";
	};

	class EnemyCountsMenu { //NNS
		title = $STR_NNS_param_EnemyCountsMenu_title;
		values[] = {0,1};
		texts[] = {$STR_NNS_param_normal,$STR_NNS_param_EnemyCountsMenu_limited};
		default = 0;
		file = "params\setEnemyCountsMenu.sqf";
	};
	
	class EscapeRulesMenu { //NNS
		title = $STR_NNS_param_EscapeRulesMenu_title;
		values[] = {0,1};
		texts[] = {$STR_NNS_param_EscapeRulesMenu_original,$STR_NNS_param_EscapeRulesMenu_permissive};
		default = 1;
		file = "params\setEscapeRules.sqf";
	};
	
	class EscapeAIskillMenu { //NNS
		title = $STR_NNS_param_EscapeAIskillMenu_title;
		values[] = {0,1,2};
		texts[] = {$STR_NNS_param_EscapeAIskillMenu_novice,$STR_NNS_param_EscapeAIskillMenu_normal,$STR_NNS_param_EscapeAIskillMenu_expert};
		default = 1;
		file = "params\setAIskill.sqf";
	};
	
	#define DAYTIMEHOUR_DEFAULT		17
	#define WEATHER_DEFAULT			0 //NNS
	#define DEBUGCONSOLE_DEFAULT		1 //NNS
	#define TIMEACCELERATION_DEFAULT	1

	#define VIEW_DISTANCE_MIN		1000
	#define VIEW_DISTANCE_MAX		3500
	#define VIEW_DISTANCE_DEFAULT   	2000

	#include "\a3\functions_f\Params\paramDaytimeHour.inc"
	#include "\a3\functions_f\Params\paramWeather.inc"
	#include "\a3\functions_f\Params\paramDebugConsole.inc"
	#include "\a3\Functions_F_MP_Mark\Params\paramTimeAcceleration.inc"
	#include "\a3\Functions_F_Heli\Params\paramViewDistance.inc"
	#include "\a3\functions_f\params\paramRevive.inc"
};

class CfgDebriefing {
	class success {
		title = $STR_A3_mission_completed_title;
		subtitle = "";
		description = $STR_A3_EscapeFromMalden_end01Desc;
	};
	class end1 {
		title = $STR_A3_mission_failed_title;
		description = $STR_A3_EscapeFromTanoa_end03Desc;
		subtitle = $STR_A3_EscapeFromTanoa_end03Sub;
	};
	class end2 {
		title = $STR_A3_mission_failed_title;
		description = $STR_A3_EscapeFromTanoa_end02Desc;
		subtitle = $STR_A3_EscapeFromTanoa_end02Sub;
	};
};

class CfgDebriefingSections {
	class Stats {
		title = $STR_NNS_Debrif_Stats_title;
		variable = "BIS_GlobalStats";
	};
};

corpseManagerMode = 1; 		// Type of removed bodies: 0 - none, 1 - all, 2 - only respawnable, 3 - only non-respawnable
corpseLimit = 24; 		// Max number of bodies which can be available at the same time. When exceeded, start deleting immediately.
corpseRemovalMinTime = 300; 	// Minimal time in seconds a body stays in the scene (can't be removed sooner).
corpseRemovalMaxTime = 360; 	// Maximal time in seconds after which a dead body is removed (can't stay longer).

wreckManagerMode = 1; 		// Type of removed wrecks: 0 - none, 1 - all, 2 - only respawnable, 3 - only non-respawnable
wreckLimit = 8; 		// Max number of wrecks which can be available at the same time. When exceeded, start deleting immediately.
wreckRemovalMinTime = 300; 	// Minimal time in seconds a wreck stays in the scene (can't be removed sooner).
wreckRemovalMaxTime = 360;	// Maximal time in seconds after which a wreck is removed (can't stay longer).

minPlayerDistance = 100; //NNS		// Bodies and wrecks in this vicinity of players will not be deleted even if the timer/limit condition is met.

class CfgSounds {
	sounds[] = {};
	class DistantMortar {
		name = "Distant mortar fire";
		sound[] = {"@A3\Sounds_F\arsenal\weapons_static\Mortar\Mortar82mm_distShot_01", 1, 1};
		titles[] = {0,""};
	};
	class DistantHowitzer {
		name = "Distant howitzer fire";
		sound[] = {"@A3\Sounds_F\arsenal\weapons_vehicles\cannon_155mm\CannonHeavy_distShot", 0.5, 1};
		titles[] = {0,""};
	};
};

class CfgFunctions {
	class BIS {
		class EscapeFromMalden {
			file = "Functions";
			class NNS_debugOutput {};	//NNS
			class EfM_ReconTeam {};
			class EfM_SniperTeam {};
			class EfM_AmmoboxNATO {};
			class EfM_AmmoboxCSAT {};
			class EfM_AmmoboxSpecial {};
			class EfM_LimitFAKs {};
			class EfM_PopulateCheckpoint {};
			class EfM_PopulatePost {};
			class EfM_PopulateTower {};
			class EfM_SpecialEvents {};
			class EfM_SupplyboxCSAT {};
			class EfM_SupplyboxNATO {};
			class EfM_SniperBox {};
			class NNS_Populate_CargoTower_More {};	//NNS
			class NNS_Populate_CargoHQ {};	//NNS
			class NNS_Populate_CargoHQ_More {};	//NNS
			class NNS_Populate_BagBunkerTower {};	//NNS
			class NNS_MapDrawLine {};	//NNS
			class NNS_FoundNearestEnemy {};	//NNS
			class NNS_unstuckAI {};	//NNS
			class NNS_randomVehicleDamage {};	//NNS
			class NNS_CompileDebriefingStats {};	//NNS
			class NNS_AIskill {};	//NNS
			class NNS_AInoPower {};	//NNS
			class NNS_CleanBuilding {};	//NNS
			class NNS_groupCenter {};	//NNS
		};
	};
};


class CfgCommunicationMenu { //NNS
	class Debug_Menu
	{
		text = "Debug Menu";		// Text displayed in the menu and in a notification
		submenu = "#USER:MENU_COMMS_DEBUG";					// Submenu opened upon activation (expression is ignored when submenu is not empty.)
		expression = "";	// Code executed upon activation
		icon = "img\debug_icon.paa";				// Icon displayed permanently next to the command menu
		enable = "1";					// Simple expression condition for enabling the item
		removeAfterExpressionCall = 0;	// 1 to remove the item after calling
	};
};

class CfgTaskTypes { //NNS
	class RescueHostage {icon = "\a3\ui_f\data\IGUI\Cfg\holdactions\holdAction_secure_ca.paa";};
};